    1. const calculateMax = (coll) => {
  // Если коллекция пустая, то у нее не может быть максимального значения
  // В подобных ситуациях принято возвращать null
  // Это классический пример использования идиомы guard expression
  if (coll.length === 0) {
    return null;
  }

  // Сравнение элементов нужно начать с какого-то первого элемента
  let max = coll[0]; // Принимаем за максимальное значение первый элемент
  // Обход начинаем со второго элемента
  for (let i = 1; i < coll.length; i += 1) {
    const currentElement = coll[i];
    // Если текущий элемент больше максимального,
    // то он становится максимальным
    if (currentElement > max) {
      max = currentElement;
    }
  }

  // Не забываем вернуть максимальное число
  return max;
};

console.log(calculateMax([])); // => null
console.log(calculateMax([3, 2, -10, 38, 0])); // => 38
    2. Нейтральный элемент:
const calculateSum = (coll) => {
  // Начальное значение суммы
  // Используем переменную, так как в процессе работы сумма будет меняться
  let sum = 0;
  for (let i = 0; i < coll.length; i += 1) {
    // Поочередно складываем все элементы
    sum += coll[i];
  }

  return sum;
};

// Сумма элементов всегда возвращает какое-то число
// Если массив пустой, то сумма его элементов равна нулю
console.log(calculateSum([])); // => 0

console.log(calculateSum([3, 2, -10, 38, 0])); // => 33
// Процесс вычислений
let sum = 0;
sum = sum + 3; // 3
sum = sum + 2; // 5
sum = sum + -10; // -5
sum = sum + 38; // 33
sum = sum + 0; // 33